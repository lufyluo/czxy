<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.czxy.manage.dao.SubjectMapper">
    <insert id="add" parameterType="com.czxy.manage.model.entity.SubjectEntity" useGeneratedKeys="true"
            keyProperty="id">
        insert into subject (name, content, types, files, teacher_id, category,description)
        values (#{name}, #{content}, #{types}, #{files}, #{teacherId}, #{category},#{description})
    </insert>
    <update id="update">
        update subject
        set name         = #{name}
          , content=#{content}
          , types=#{types}
          , teacher_id   =#{teacherId}
          , category     =#{category}
          , description  = #{description}
          , updated_time = now()
        where id = #{id}
    </update>
    <delete id="delete">
        delete from subject where id in
        <foreach collection="subjectIds" item="item" index="index"
                 open="(" separator="," close=")">#{item}
        </foreach>
    </delete>

    <select id="query" resultType="com.czxy.manage.model.entity.SubjectDetailEntity">
        select
        s.id,s.name,u.name as teacherName,s.types,s.files,s.content,s.category,s.description
        from subject s
        left join teacher t
        on s.teacher_id=t.id
        left join user u
        on t.user_id=u.id
        where 1=1
        <if test="param != null and param != ''">
            and (s.name like '%${param}%' or u.name like '%${param}%')
        </if>
        <if test="typeId != null and typeId != ''">
            and (s.types like '${typeId},%' or s.types like '%,${typeId}' or s.types like '%,${typeId},%')
        </if>
        <if test="category != null and category != ''">
            and s.category=#{category}
        </if>
        order by s.id desc
    </select>

    <select id="queryByArrangeId" resultType="com.czxy.manage.model.entity.CourseDetailEntity">
        select c.id,
               c.name,
               c.description,
               s.addr          as address,
               ca.category,
               ca.begin_time   as beginTime,
               ca.end_time     as endTime,
               ca.offset,
               t.id            as teacherId,
               u.name          as teacherName,
               s.name          as siteName,
               s.id            as siteId,
               ca.updated_time as updatedTime,
               ca.created_time as createdTime
        from course_arrange ca
                 left join subject c on ca.content_id = c.id
                 left join teacher t
                           on c.teacher_id = t.id
                 left join user u
                           on t.user_id = u.id
                 left join site s
                           on ca.content_id = s.id
        where ca.arrange_id = #{arrangeId}
        order by ca.begin_time
    </select>
    <select id="queryById" resultType="com.czxy.manage.model.entity.SubjectEntity">
        select s.id,
               s.name,
               s.content,
               s.types,
               s.files,
               s.teacher_id as teacherId,
               s.category,
               s.description,
               u.name       as teacherName
        from subject s
                 left join teacher t
                           on s.teacher_id = t.id
                 left join user u
                           on t.user_id = u.id
        where s.id = #{subjectId}
    </select>
    <select id="getByTeacherId" resultType="com.czxy.manage.model.entity.SubjectEntity">
        select name,
               content,
               types,
               types      as typeIds,
               files,
               teacher_id as teacherId,
               category,
               description
        from subject
        where teacher_id = #{teacherId}
    </select>
</mapper>